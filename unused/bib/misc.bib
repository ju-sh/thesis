% Encoding: UTF-8

@Article{10.1017/S095679680800676X,
  author     = {Minsky, Yaron and Weeks, Stephen},
  title      = {Caml Trading – Experiences with Functional Programming on Wall Street},
  journal    = {J. Funct. Program.},
  year       = {2008},
  volume     = {18},
  number     = {4},
  pages      = {553–564},
  month      = {jul},
  issn       = {0956-7968},
  abstract   = {Jane Street Capital is a successful proprietary trading company that uses OCaml as its primary development language. We have over twenty OCaml programmers and hundreds of thousands of lines of OCaml code. We use OCaml for a wide range of tasks: critical trading systems, quantitative research, systems software, and system administration. We value OCaml because it allows us to rapidly produce readable, correct, efficient code to solve complex problems, and to change that code quickly to adapt to a changing world. We believe that using OCaml gives us a significant advantage over competitors that use languages like VB, Perl, C++, C#, or Java. It also makes finding and hiring high-quality software developers easier than with mainstream languages. We have invested deeply in OCaml and intend to use OCaml and grow our team of functional programmers for the foreseeable future.},
  address    = {USA},
  doi        = {10.1017/S095679680800676X},
  issue_date = {July 2008},
  numpages   = {12},
  publisher  = {Cambridge University Press},
  review     = {Read fully.},
  url        = {https://doi.org/10.1017/S095679680800676X},
}

@Book{joyce1990formal,
  title     = {From formal verification to silicon compilation},
  publisher = {University of British Columbia, Department of Computer Science},
  year      = {1990},
  author    = {Joyce, Jeffrey J and Liu, Erwin and Rushby, John M and Shankar, Natarajan and Suaya, Roberto and von Henke, Friedrich W},
}

@Book{10.5555/1211948,
  title     = {Hardware Design Verification: Simulation and Formal Method-Based Approaches (Prentice Hall Modern Semiconductor Design Series)},
  publisher = {Prentice Hall PTR},
  year      = {2005},
  author    = {Lam, William K.},
  address   = {USA},
  isbn      = {0131433474},
  abstract  = {The Practical, Start-to-Finish Guide to Modern Digital Design VerificationAs digital logic designs grow larger and more complex, functional verification has become the number one bottleneck in the design process. Reducing verification time is crucial to project success, yet many practicing engineers have had little formal training in verification, and little exposure to the newest solutions. Hardware Design Verification systematically presents today's most valuable simulation-based and formal verification techniques, helping test and design engineers choose the best approach for each project, quickly gain confidence in their designs, and move into fabrication far more rapidly. College students will find that coverage of verification principles and common industry practices will help them prepare for jobs as future verification engineers.Author William K. Lam, one of the world's leading experts in design verification, is a recent winner of the Chairman's Award for Innovation, Sun Microsystems' most prestigious technical achievement award. Drawing on his wide-ranging experience, he introduces the foundational principles of verification, presents traditional techniques that have survived the test of time, and introduces emerging techniques for today's most challenging designs. Throughout, Lam emphasizes practical examples rather than mathematical proofs; wherever advanced math is essential, he explains it clearly and accessibly.Coverage includes Simulation-based versus formal verification: advantages, disadvantages, and tradeoffs Coding for verification: functional and timing correctness, syntactical and structure checks, simulation performance, and more Simulator architectures and operations, including event-driven, cycle-based, hybrid, and hardware-based simulators Testbench organization, design, and tools: creating a fast, efficient test environment Test scenarios and assertion: planning, test cases, test generators, commercial and Verilog assertions, and more Ensuring complete coverage, including code, parameters, functions, items, and cross-coverage The verification cycle: failure capture, scope reduction, bug tracking, simulation data dumping, isolation of underlying causes, revision control, regression, release mechanisms, and tape-out criteria An accessible introduction to the mathematics and algorithms of formal verification, from Boolean functions to state-machine equivalence and graph algorithms Decision diagrams, equivalence checking, and symbolic simulation Model checking and symbolic computationSimply put, Hardware Design Verification will help you improve and accelerate your entire verification process--from planning through tape-out--so you can get to market faster with higher quality designs.},
}

@Article{russinoff2022formal,
  author    = {Russinoff, David M},
  title     = {Formal verification of floating-point hardware design},
  journal   = {Springer, doi},
  year      = {2022},
  volume    = {10},
  pages     = {978--3},
  publisher = {Springer},
}

@InProceedings{chockler2011incremental,
  author       = {Chockler, Hana and Ivrii, Alexander and Matsliah, Arie and Moran, Shiri and Nevo, Ziv},
  title        = {Incremental formal verification of hardware},
  booktitle    = {2011 Formal Methods in Computer-Aided Design (FMCAD)},
  year         = {2011},
  pages        = {135--143},
  organization = {IEEE},
}

@InProceedings{braibant2013formal,
  author       = {Braibant, Thomas and Chlipala, Adam},
  title        = {Formal verification of hardware synthesis},
  booktitle    = {Computer Aided Verification: 25th International Conference, CAV 2013, Saint Petersburg, Russia, July 13-19, 2013. Proceedings 25},
  year         = {2013},
  pages        = {213--228},
  organization = {Springer},
}

@Article{kern1999formal,
  author    = {Kern, Christoph and Greenstreet, Mark R},
  title     = {Formal verification in hardware design: a survey},
  journal   = {ACM Transactions on Design Automation of Electronic Systems (TODAES)},
  year      = {1999},
  volume    = {4},
  number    = {2},
  pages     = {123--193},
  publisher = {ACM New York, NY, USA},
}

@Article{herklotz2021formal,
  author    = {Herklotz, Yann and Pollard, James D and Ramanathan, Nadesh and Wickerson, John},
  title     = {Formal verification of high-level synthesis},
  journal   = {Proceedings of the ACM on Programming Languages},
  year      = {2021},
  volume    = {5},
  number    = {OOPSLA},
  pages     = {1--30},
  publisher = {ACM New York, NY, USA},
}

@InProceedings{10.1007/BFb0054170,
  author    = {Pnueli, A. and Siegel, M. and Singerman, E.},
  title     = {Translation validation},
  booktitle = {Tools and Algorithms for the Construction and Analysis of Systems},
  year      = {1998},
  editor    = {Steffen, Bernhard},
  pages     = {151--166},
  address   = {Berlin, Heidelberg},
  publisher = {Springer Berlin Heidelberg},
  abstract  = {We present the notion of translation validation as a new approach to the verification of translators (compilers, code generators). Rather than proving in advance that the compiler always produces a target code which correctly implements the source code (compiler verification), each individual translation (i.e. a run of the compiler) is followed by a validation phase which verifies that the target code produced on this run correctly implements the submitted source program. Several ingredients are necessary to set up the --- fully automatic --- translation validation process, among which are:1.A common semantic framework for the representation of the source code and the generated target code.2.A formalization of the notion of ``correct implementation'' as a refinement relation.3.A syntactic simulation-based proof method which allows to automatically verify that one model of the semantic framework, representing the produced target code, correctly implements another model which represents the source.},
  isbn      = {978-3-540-69753-4},
}

@InProceedings{10.1145/1328438.1328444,
  author    = {Tristan, Jean-Baptiste and Leroy, Xavier},
  title     = {Formal Verification of Translation Validators: A Case Study on Instruction Scheduling Optimizations},
  booktitle = {Proceedings of the 35th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
  year      = {2008},
  series    = {POPL '08},
  pages     = {17–27},
  address   = {New York, NY, USA},
  publisher = {Association for Computing Machinery},
  abstract  = {Translation validation consists of transforming a program and a posteriori validating it in order to detect a modification of itssemantics. This approach can be used in a verified compiler, provided that validation is formally proved to be correct. We present two such validators and their Coq proofs of correctness. The validators are designed for two instruction scheduling optimizations: list scheduling and trace scheduling.},
  doi       = {10.1145/1328438.1328444},
  isbn      = {9781595936899},
  keywords  = {scheduling optimizations, verified compilers, translation validation, the coq proof assistant},
  location  = {San Francisco, California, USA},
  numpages  = {11},
  url       = {https://doi.org/10.1145/1328438.1328444},
}

@InProceedings{8807452,
  author    = {Lööw, Andreas and Myreen, Magnus O.},
  title     = {A Proof-Producing Translator for Verilog Development in HOL},
  booktitle = {2019 IEEE/ACM 7th International Conference on Formal Methods in Software Engineering (FormaliSE)},
  year      = {2019},
  pages     = {99-108},
  doi       = {10.1109/FormaliSE.2019.00020},
}

@PhdThesis{ellis2008correct,
  author = {Ellis, Martin Andrew},
  title  = {Correct synthesis and integration of compiler-generated function units},
  school = {Newcastle University},
  year   = {2008},
}

@TechReport{budiu2002pegasus,
  author      = {Budiu, Mihai and Goldstein, Seth C},
  title       = {Pegasus: An efficient intermediate representation},
  institution = {CARNEGIE-MELLON UNIV PITTSBURGH PA SCHOOL OF COMPUTER SCIENCE},
  year        = {2002},
}

@InProceedings{guo2016scalable,
  author       = {Guo, Xiaolong and Dutta, Raj Gautam and Mishra, Prabhat and Jin, Yier},
  title        = {Scalable SoC trust verification using integrated theorem proving and model checking},
  booktitle    = {2016 IEEE International Symposium on Hardware Oriented Security and Trust (HOST)},
  year         = {2016},
  pages        = {124--129},
  organization = {IEEE},
}

@Article{danvy_2023,
  author    = {DANVY, OLIVIER},
  title     = {Folding left and right matters: Direct style, accumulators, and continuations},
  journal   = {Journal of Functional Programming},
  year      = {2023},
  volume    = {33},
  pages     = {e2},
  doi       = {10.1017/S0956796822000156},
  publisher = {Cambridge University Press},
  review    = {https://www.cambridge.org/core/journals/journal-of-functional-programming/volume/DF65DA2A1E741F7B8B48A387DEB507E5},
}

@Article{dreyer_pierce_2022,
  author    = {DREYER, DEREK and PIERCE, BENJAMIN C.},
  title     = {On being a PhD student of Robert Harper},
  journal   = {Journal of Functional Programming},
  year      = {2022},
  volume    = {32},
  pages     = {e3},
  doi       = {10.1017/S0956796821000289},
  publisher = {Cambridge University Press},
}

@Article{abel2019poplmark,
  author    = {Abel, Andreas and Allais, Guillaume and Hameer, Aliya and Pientka, Brigitte and Momigliano, Alberto and Sch{\"a}fer, Steven and Stark, Kathrin},
  title     = {POPLMark reloaded: Mechanizing proofs by logical relations},
  journal   = {Journal of Functional Programming},
  year      = {2019},
  volume    = {29},
  pages     = {e19},
  publisher = {Cambridge University Press},
}

@InProceedings{aydemir2005mechanized,
  author       = {Aydemir, Brian E and Bohannon, Aaron and Fairbairn, Matthew and Foster, J Nathan and Pierce, Benjamin C and Sewell, Peter and Vytiniotis, Dimitrios and Washburn, Geoffrey and Weirich, Stephanie and Zdancewic, Steve},
  title        = {Mechanized metatheory for the masses: the P opl M ark challenge},
  booktitle    = {Theorem Proving in Higher Order Logics: 18th International Conference, TPHOLs 2005, Oxford, UK, August 22-25, 2005. Proceedings 18},
  year         = {2005},
  pages        = {50--65},
  organization = {Springer},
}

@PhdThesis{leroy2007locally,
  author = {Leroy, Xavier},
  title  = {A locally nameless solution to the POPLmark challenge},
  school = {INRIA},
  year   = {2007},
}

@Article{ciaffaglione2013weak,
  author  = {Ciaffaglione, Alberto and Scagnetto, Ivan},
  title   = {A weak HOAS approach to the POPLmark Challenge},
  journal = {arXiv preprint arXiv:1303.7332},
  year    = {2013},
}

@Article{vouillon2012solution,
  author    = {Vouillon, J{\'e}r{\^o}me},
  title     = {A solution to the poplmark challenge based on de bruijn indices},
  journal   = {Journal of Automated Reasoning},
  year      = {2012},
  volume    = {49},
  number    = {3},
  pages     = {327--362},
  publisher = {Springer},
}

@InProceedings{harrison2014history,
  author    = {Harrison, John and Urban, Josef and Wiedijk, Freek},
  title     = {History of Interactive Theorem Proving.},
  booktitle = {Computational Logic},
  year      = {2014},
  volume    = {9},
  pages     = {135--214},
}

@Article{chlipala2007certified,
  author    = {Chlipala, Adam},
  title     = {A certified type-preserving compiler from lambda calculus to assembly language},
  journal   = {ACM Sigplan Notices},
  year      = {2007},
  volume    = {42},
  number    = {6},
  pages     = {54--65},
  publisher = {ACM New York, NY, USA},
}

@Article{leroy2009formal,
  author    = {Leroy, Xavier},
  title     = {Formal verification of a realistic compiler},
  journal   = {Communications of the ACM},
  year      = {2009},
  volume    = {52},
  number    = {7},
  pages     = {107--115},
  publisher = {ACM New York, NY, USA},
}

@InProceedings{Swierstra1996,
  author    = {Swierstra, S. Doaitse and Duponcheel, Luc},
  title     = {Deterministic, Error-Correcting Combinator Parsers},
  booktitle = {Advanced Functional Programming, Second International School-Tutorial Text},
  year      = {1996},
  pages     = {184–207},
  address   = {Berlin, Heidelberg},
  publisher = {Springer-Verlag},
  isbn      = {3540616284},
  numpages  = {24},
}

@Article{plotkin2013handling,
  author    = {Plotkin, Gordon D and Pretnar, Matija},
  title     = {Handling algebraic effects},
  journal   = {Logical methods in computer science},
  year      = {2013},
  volume    = {9},
  publisher = {Episciences. org},
}

@Article{plotkin1975call,
  author    = {Plotkin, Gordon D.},
  title     = {Call-by-name, call-by-value and the $\lambda$-calculus},
  journal   = {Theoretical computer science},
  year      = {1975},
  volume    = {1},
  number    = {2},
  pages     = {125--159},
  publisher = {Elsevier},
}

@InProceedings{plotkin2001adequacy,
  author       = {Plotkin, Gordon and Power, John},
  title        = {Adequacy for algebraic effects},
  booktitle    = {International Conference on Foundations of Software Science and Computation Structures},
  year         = {2001},
  pages        = {1--24},
  organization = {Springer},
}

@Article{klop2007new,
  author  = {Klop, JW},
  title   = {New fixed point combinators from old},
  journal = {Reflections on Type Theory, $\lambda$-Calculus, and the Mind. Essays dedicated to Henk Barendregt on the occasion of his 60th birthday, Radboud University Nijmegen},
  year    = {2007},
  pages   = {197--211},
}

@Article{harper1999proof,
  author    = {Harper, Robert},
  title     = {Proof-directed debugging},
  journal   = {Journal of functional programming},
  year      = {1999},
  volume    = {9},
  number    = {4},
  pages     = {463--469},
  publisher = {Cambridge University Press},
}

@Article{elliott2021symbolic,
  author    = {Elliott, Conal},
  title     = {Symbolic and automatic differentiation of languages},
  journal   = {Proceedings of the ACM on Programming Languages},
  year      = {2021},
  volume    = {5},
  number    = {ICFP},
  pages     = {1--18},
  publisher = {ACM New York, NY, USA},
}

@InProceedings{elliott1997functional,
  author    = {Elliott, Conal and Hudak, Paul},
  title     = {Functional reactive animation},
  booktitle = {Proceedings of the second ACM SIGPLAN international conference on Functional programming},
  year      = {1997},
  pages     = {263--273},
}

@Article{10.1145/3591259,
  author     = {Kanabar, Hrutvik and Vivien, Samuel and Abrahamsson, Oskar and Myreen, Magnus O. and Norrish, Michael and Pohjola, Johannes \r{A}man and Zanetti, Riccardo},
  title      = {PureCake: A Verified Compiler for a Lazy Functional Language},
  journal    = {Proc. ACM Program. Lang.},
  year       = {2023},
  volume     = {7},
  number     = {PLDI},
  month      = {jun},
  abstract   = {We present PureCake, a mechanically-verified compiler for PureLang, a lazy, purely functional programming language with monadic effects. PureLang syntax is Haskell-like and indentation-sensitive, and its constraint-based Hindley-Milner type system guarantees safe execution. We derive sound equational reasoning principles over its operational semantics, dramatically simplifying some proofs. We prove end-to-end correctness for the compilation of PureLang down to machine code---the first such result for any lazy language---by targeting CakeML and composing with its verified compiler. Multiple optimisation passes are necessary to handle realistic lazy idioms effectively. We develop PureCake entirely within the HOL4 interactive theorem prover.},
  address    = {New York, NY, USA},
  articleno  = {145},
  doi        = {10.1145/3591259},
  issue_date = {June 2023},
  keywords   = {HOL4, Haskell, compiler verification, interactive theorem proving},
  numpages   = {25},
  publisher  = {Association for Computing Machinery},
  url        = {https://doi.org/10.1145/3591259},
}

@Book{10.5555/536771,
  title     = {The Psychology of Computer Programming},
  publisher = {John Wiley \& Sons, Inc.},
  year      = {1985},
  author    = {Weinberg, Gerald M.},
  address   = {USA},
  isbn      = {0442292643},
  abstract  = {From the Publisher:This landmark 1971 classic is reprinted with new commentary and a Preface from the author. Long regarded as one of the first books to pioneer a people-oriented approach to computing, The Psychology of Computer Programming endures as a penetrating analysis of the intelligence, skill, teamwork, and problem-solving power of the computer programmer. Returning to topics that are strikingly relevant to today's issues in programming, Gerald M. Weinberg provides a characteristically fresh perspective on his original insights, highlighting the similarities and differences between now and then. Using a conversational style that invites the reader to join him, Weinberg reunites with some of his most enduring, straight-from-the-heart observations on the human side of software engineering. Dorset House Publishing is proud to make this important text available to new generations of Weinberg fans — and to encourage readers of the first edition to return to its valuable lessons.},
}

@InProceedings{chattopadhyay2020verified,
  author       = {Chattopadhyay, Agnishom and Mamouras, Konstantinos},
  title        = {A verified online monitor for metric temporal logic with quantitative semantics},
  booktitle    = {Runtime Verification: 20th International Conference, RV 2020, Los Angeles, CA, USA, October 6--9, 2020, Proceedings 20},
  year         = {2020},
  pages        = {383--403},
  organization = {Springer},
}

@Article{10.1145/3586044,
  author     = {Le Glaunec, Alexis and Kong, Lingkun and Mamouras, Konstantinos},
  title      = {Regular Expression Matching Using Bit Vector Automata},
  journal    = {Proc. ACM Program. Lang.},
  year       = {2023},
  volume     = {7},
  number     = {OOPSLA1},
  month      = {apr},
  abstract   = {Regular expressions (regexes) are ubiquitous in modern software. There is a variety of implementation techniques for regex matching, which can be roughly categorized as (1) relying on backtracking search, or (2) being based on finite-state automata. The implementations that use backtracking are often chosen due to their ability to support advanced pattern-matching constructs. Unfortunately, they are known to suffer from severe performance problems. For some regular expressions, the running time for matching can be exponential in the size of the input text. In order to provide stronger guarantees of matching efficiency, automata-based regex matching is the preferred choice. However, even these regex engines may exhibit severe performance degradation for some patterns. The main reason for this is that regexes used in practice are not exclusively built from the classical regular constructs, i.e., concatenation, nondeterministic choice and Kleene's star. They involve additional constructs that provide succinctness and convenience of expression. The most common such construct is bounded repetition (also called counting), which describes the repetition of the pattern a fixed number of times. In this paper, we propose a new algorithm for the efficient matching of regular expressions that involve bounded repetition. Our algorithms are based on a new model of automata, which we call nondeterministic bit vector automata (NBVA). This model is chosen to be expressively equivalent to nondeterministic counter automata with bounded counters, a very natural model for expressing patterns with bounded repetition. We show that there is a class of regular expressions with bounded repetition that can be matched in time that is independent from the repetition bounds. Our algorithms are general enough to cover the vast majority of challenging bounded repetitions that arise in practice. We provide an implementation of our approach in a regex engine, which we call BVA-Scan. We compare BVA-Scan against state-of-the-art regex engines on several real datasets.},
  address    = {New York, NY, USA},
  articleno  = {92},
  doi        = {10.1145/3586044},
  issue_date = {April 2023},
  keywords   = {counter automata, regex, automata theory, bounded repetition},
  numpages   = {30},
  publisher  = {Association for Computing Machinery},
  url        = {https://doi.org/10.1145/3586044},
}

@InProceedings{10.1007/978-3-540-24622-0_5,
  author    = {Barringer, Howard and Goldberg, Allen and Havelund, Klaus and Sen, Koushik},
  title     = {Rule-Based Runtime Verification},
  booktitle = {Verification, Model Checking, and Abstract Interpretation},
  year      = {2004},
  editor    = {Steffen, Bernhard and Levi, Giorgio},
  pages     = {44--57},
  address   = {Berlin, Heidelberg},
  publisher = {Springer Berlin Heidelberg},
  abstract  = {We present a rule-based framework for defining and implementing finite trace monitoring logics, including future and past time temporal logic, extended regular expressions, real-time logics, interval logics, forms of quantified temporal logics, and so on. Our logic, Eagle, is implemented as a Java library and involves novel techniques for rule definition, manipulation and execution. Monitoring is done on a state-by-state basis, without storing the execution trace.},
  isbn      = {978-3-540-24622-0},
}

@InBook{Bartocci2018,
  pages     = {135--175},
  title     = {Specification-Based Monitoring of Cyber-Physical Systems: A Survey on Theory, Tools and Applications},
  publisher = {Springer International Publishing},
  year      = {2018},
  author    = {Bartocci, Ezio and Deshmukh, Jyotirmoy and Donz{\'e}, Alexandre and Fainekos, Georgios and Maler, Oded and Ni{\v{c}}kovi{\'{c}}, Dejan and Sankaranarayanan, Sriram},
  editor    = {Bartocci, Ezio and Falcone, Yli{\`e}s},
  address   = {Cham},
  isbn      = {978-3-319-75632-5},
  abstract  = {The term Cyber-Physical Systems (CPS) typically refers to engineered, physical and biological systems monitored and/or controlled by an embedded computational core. The behaviour of a CPS over time is generally characterised by the evolution of physical quantities, and discrete software and hardware states. In general, these can be mathematically modelled by the evolution of continuous state variables for the physical components interleaved with discrete events. Despite large effort and progress in the exhaustive verification of such hybrid systems, the complexity of CPS models limits formal verification of safety of their behaviour only to small instances. An alternative approach, closer to the practice of simulation and testing, is to monitor and to predict CPS behaviours at simulation-time or at runtime. In this chapter, we summarise the state-of-the-art techniques for qualitative and quantitative monitoring of CPS behaviours. We present an overview of some of the important applications and, finally, we describe the tools supporting CPS monitoring and compare their main features.},
  booktitle = {Lectures on Runtime Verification: Introductory and Advanced Topics},
  doi       = {10.1007/978-3-319-75632-5_5},
  url       = {https://doi.org/10.1007/978-3-319-75632-5_5},
}

@InProceedings{tuerk2005psl,
  author       = {Tuerk, Thomas and Schneider, Klaus},
  title        = {From PSL to LTL: A formal validation in HOL},
  booktitle    = {Theorem Proving in Higher Order Logics: 18th International Conference, TPHOLs 2005, Oxford, UK, August 22-25, 2005. Proceedings 18},
  year         = {2005},
  pages        = {342--357},
  organization = {Springer},
}

@Misc{singh2008transformation,
  author    = {Singh, Vinaya K and Garg, Tarun},
  title     = {Transformation of simple subset of PSL into SERE implication formulas for verification with model checking and simulation engines using semantic preserving rewrite rules},
  month     = jun #{~10},
  year      = {2008},
  note      = {US Patent 7,386,813},
  publisher = {Google Patents},
}

@Article{smith2022psl,
  author  = {Smith, Kevin and Lin, Hai and Tiwari, Praveen and Sayer, Marjorie and Coelho, Claudionor},
  title   = {PSL is Dead. Long Live PSL},
  journal = {arXiv preprint arXiv:2205.14136},
  year    = {2022},
  review  = {Unpublished. Only on arxiv. Maybe of low quality. Didn't really read.},
}

@InProceedings{liu2022implicit,
  author    = {Liu, Fengyun and Prokopec, Aleksandar},
  title     = {Implicit state machines},
  booktitle = {Proceedings of the 23rd ACM SIGPLAN/SIGBED International Conference on Languages, Compilers, and Tools for Embedded Systems},
  year      = {2022},
  pages     = {13--25},
}

@InProceedings{harrison2021mechanized,
  author    = {Harrison, William L and Hathhorn, Chris and Allwein, Gerard},
  title     = {A mechanized semantic metalanguage for high level synthesis},
  booktitle = {23rd International Symposium on Principles and Practice of Declarative Programming},
  year      = {2021},
  pages     = {1--14},
}

@InProceedings{sidhu2001fast,
  author       = {Sidhu, Reetinder and Prasanna, Viktor K},
  title        = {Fast regular expression matching using FPGAs},
  booktitle    = {The 9th Annual IEEE Symposium on Field-Programmable Custom Computing Machines (FCCM'01)},
  year         = {2001},
  pages        = {227--238},
  organization = {IEEE},
}

@InProceedings{flanagan1993essence,
  author    = {Flanagan, Cormac and Sabry, Amr and Duba, Bruce F and Felleisen, Matthias},
  title     = {The essence of compiling with continuations},
  booktitle = {Proceedings of the ACM SIGPLAN 1993 conference on Programming language design and implementation},
  year      = {1993},
  pages     = {237--247},
}

@InProceedings{maurer2017compiling,
  author    = {Maurer, Luke and Downen, Paul and Ariola, Zena M and Peyton Jones, Simon},
  title     = {Compiling without continuations},
  booktitle = {Proceedings of the 38th ACM SIGPLAN Conference on Programming Language Design and Implementation},
  year      = {2017},
  pages     = {482--494},
}

@Book{appel2007compiling,
  title     = {Compiling with continuations},
  publisher = {Cambridge university press},
  year      = {2007},
  author    = {Appel, Andrew W},
}

@InProceedings{kennedy2007compiling,
  author    = {Kennedy, Andrew},
  title     = {Compiling with continuations, continued},
  booktitle = {Proceedings of the 12th ACM SIGPLAN international conference on Functional programming},
  year      = {2007},
  pages     = {177--190},
}

@Article{ahmed2010semantic,
  author    = {Ahmed, Amal and Appel, Andrew W and Richards, Christopher D and Swadi, Kedar N and Tan, Gang and Wang, Daniel C},
  title     = {Semantic foundations for typed assembly languages},
  journal   = {ACM Transactions on Programming Languages and Systems (TOPLAS)},
  year      = {2010},
  volume    = {32},
  number    = {3},
  pages     = {1--67},
  publisher = {ACM New York, NY, USA},
}

@Article{ahmed2017theorems,
  author    = {Ahmed, Amal and Jamner, Dustin and Siek, Jeremy G and Wadler, Philip},
  title     = {Theorems for free for free: Parametricity, with and without types},
  journal   = {Proceedings of the ACM on Programming Languages},
  year      = {2017},
  volume    = {1},
  number    = {ICFP},
  pages     = {1--28},
  publisher = {ACM New York, NY, USA},
}

@Comment{jabref-meta: databaseType:bibtex;}
